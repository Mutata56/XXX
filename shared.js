const DASHBOARD_ENABLED_KEY = '_ticketDashboardEnabled';
    const AUTO_SYNC_ENABLED_KEY = '_ticketAutoSyncEnabled';

    function isDashboardEnabled() {
        return localStorage.getItem(DASHBOARD_ENABLED_KEY) !== 'false';
    }

    function setDashboardEnabled(flag) {
        localStorage.setItem(DASHBOARD_ENABLED_KEY, flag ? 'true' : 'false');
    }

    function isAutoSyncEnabled() {
        return localStorage.getItem(AUTO_SYNC_ENABLED_KEY) !== 'false';
    }

    function setAutoSyncEnabled(flag) {
        localStorage.setItem(AUTO_SYNC_ENABLED_KEY, flag ? 'true' : 'false');
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π scope
    window.dashboardSettings = {
        isDashboardEnabled,
        setDashboardEnabled,
        isAutoSyncEnabled,
        setAutoSyncEnabled
    };

const DARK_MODE_KEY = '_ticketShiftDarkMode';

function getStoredShift() {
    return JSON.parse(localStorage.getItem('_ticketShiftStorage')) || {
        "–í —Ä–∞–±–æ—Ç–µ": [],
        "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞": [],
        "–†–µ—à–µ–Ω–∞": [],
        "–ù–æ–≤–∞—è": []
    };
}

function saveStorage(data) {
    localStorage.setItem('_ticketShiftStorage', JSON.stringify(data));
}

function getCategoryByStatus(status) {
    if (status.includes('–í –ø—Ä–æ—Ü–µ—Å—Å–µ') || status.includes('–í —Ä–∞–±–æ—Ç–µ')) return "–í —Ä–∞–±–æ—Ç–µ";
    if (status.includes('–û–∂–∏–¥–∞–Ω–∏–µ')) return "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞";
    if (status.includes('–†–µ—à–µ–Ω–∞') || status.includes('–ó–∞–∫—Ä—ã—Ç–∞')) return "–†–µ—à–µ–Ω–∞";
    if (status.includes('–ù–æ–≤–∞—è')) return "–ù–æ–≤–∞—è";
    return null;
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function clearStorage() {
    //	console.log("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ clearStorage");
    saveStorage({
        "–í —Ä–∞–±–æ—Ç–µ": [],
        "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞": [],
        "–†–µ—à–µ–Ω–∞": [],
        "–ù–æ–≤–∞—è": []
    });
    alert('–°–º–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
}

function addSqlCopyButtons() {
    const codeBlocks = document.querySelectorAll('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');

    codeBlocks.forEach(code => {
        const pre = code.closest('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        if (!pre || pre.querySelector('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')) return;

        const btn = document.createElement('button');
        btn.className = 'sql-copy-btn';
        btn.textContent = 'üìã';
        btn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å SQL';

        btn.onclick = () => {
            const text = code.innerText;
            navigator.clipboard.writeText(text).then(() => {
                btn.textContent = '‚úÖ';
                setTimeout(() => {
                    btn.textContent = 'üìã';
                }, 1500);
            });
        };

        pre.appendChild(btn); // ‚¨ÖÔ∏è –í–ê–ñ–ù–û: –≤–Ω—É—Ç—Ä—å <pre>
    });
}

addSqlCopyButtons();
setInterval(addSqlCopyButtons, 1500);

document.querySelectorAll('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').forEach(pre => {
    const btn = pre.querySelector('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    if (!btn) return;

    pre.addEventListener('scroll', () => {
        btn.style.right = `${4 - pre.scrollLeft}px`;
    });
});

 function isDarkMode() {
        //console.log("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ isDarkMode")
        return localStorage.getItem(DARK_MODE_KEY) === 'true';
    }

    function toggleDarkMode(value) {
        //	console.log("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ toggleDarkMode")
        localStorage.setItem(DARK_MODE_KEY, value ? 'true' : 'false');
        console.log('Dark mode set to:', value);
    }


	
	function sortCategoryByUrl(entries) {
        //console.log("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ sortCategoryByUrl");
        return entries.slice().sort((a, b) => a.localeCompare(b));
    }
	 function formatShiftText(s) {
        //	console.log("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ formatShiftText");
        const sortedWork = sortCategoryByUrl(s["–í —Ä–∞–±–æ—Ç–µ"]);
        const sortedWait = sortCategoryByUrl(s["–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"]);
        const sortedDone = sortCategoryByUrl(s["–†–µ—à–µ–Ω–∞"]);
        const sortedNew = sortCategoryByUrl(s["–ù–æ–≤–∞—è"]);
        return (
            '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ —Å–º–µ–Ω–µ:\n\n' +
            '–í —Ä–∞–±–æ—Ç–µ:\n\n' +
            sortedWork.join('\n') + '\n\n' +
            '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n' +
            sortedWait.join('\n') + '\n\n' +
            '–†–µ—à–µ–Ω–∞:\n\n' +
            sortedDone.join('\n') + '\n\n' +
            '–ù–æ–≤–∞—è:\n\n' +
            sortedNew.join('\n')
        );
    }